// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/d0lim/turnstile/internal/ent/predicate"
	"github.com/d0lim/turnstile/internal/ent/useroauthprovider"
)

// UserOauthProviderUpdate is the builder for updating UserOauthProvider entities.
type UserOauthProviderUpdate struct {
	config
	hooks    []Hook
	mutation *UserOauthProviderMutation
}

// Where appends a list predicates to the UserOauthProviderUpdate builder.
func (uopu *UserOauthProviderUpdate) Where(ps ...predicate.UserOauthProvider) *UserOauthProviderUpdate {
	uopu.mutation.Where(ps...)
	return uopu
}

// SetUserID sets the "user_id" field.
func (uopu *UserOauthProviderUpdate) SetUserID(i int64) *UserOauthProviderUpdate {
	uopu.mutation.ResetUserID()
	uopu.mutation.SetUserID(i)
	return uopu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uopu *UserOauthProviderUpdate) SetNillableUserID(i *int64) *UserOauthProviderUpdate {
	if i != nil {
		uopu.SetUserID(*i)
	}
	return uopu
}

// AddUserID adds i to the "user_id" field.
func (uopu *UserOauthProviderUpdate) AddUserID(i int64) *UserOauthProviderUpdate {
	uopu.mutation.AddUserID(i)
	return uopu
}

// SetOauthProvider sets the "oauth_provider" field.
func (uopu *UserOauthProviderUpdate) SetOauthProvider(s string) *UserOauthProviderUpdate {
	uopu.mutation.SetOauthProvider(s)
	return uopu
}

// SetNillableOauthProvider sets the "oauth_provider" field if the given value is not nil.
func (uopu *UserOauthProviderUpdate) SetNillableOauthProvider(s *string) *UserOauthProviderUpdate {
	if s != nil {
		uopu.SetOauthProvider(*s)
	}
	return uopu
}

// SetOauthUserID sets the "oauth_user_id" field.
func (uopu *UserOauthProviderUpdate) SetOauthUserID(s string) *UserOauthProviderUpdate {
	uopu.mutation.SetOauthUserID(s)
	return uopu
}

// SetNillableOauthUserID sets the "oauth_user_id" field if the given value is not nil.
func (uopu *UserOauthProviderUpdate) SetNillableOauthUserID(s *string) *UserOauthProviderUpdate {
	if s != nil {
		uopu.SetOauthUserID(*s)
	}
	return uopu
}

// Mutation returns the UserOauthProviderMutation object of the builder.
func (uopu *UserOauthProviderUpdate) Mutation() *UserOauthProviderMutation {
	return uopu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uopu *UserOauthProviderUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uopu.sqlSave, uopu.mutation, uopu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uopu *UserOauthProviderUpdate) SaveX(ctx context.Context) int {
	affected, err := uopu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uopu *UserOauthProviderUpdate) Exec(ctx context.Context) error {
	_, err := uopu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uopu *UserOauthProviderUpdate) ExecX(ctx context.Context) {
	if err := uopu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uopu *UserOauthProviderUpdate) check() error {
	if v, ok := uopu.mutation.OauthProvider(); ok {
		if err := useroauthprovider.OauthProviderValidator(v); err != nil {
			return &ValidationError{Name: "oauth_provider", err: fmt.Errorf(`ent: validator failed for field "UserOauthProvider.oauth_provider": %w`, err)}
		}
	}
	if v, ok := uopu.mutation.OauthUserID(); ok {
		if err := useroauthprovider.OauthUserIDValidator(v); err != nil {
			return &ValidationError{Name: "oauth_user_id", err: fmt.Errorf(`ent: validator failed for field "UserOauthProvider.oauth_user_id": %w`, err)}
		}
	}
	return nil
}

func (uopu *UserOauthProviderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uopu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(useroauthprovider.Table, useroauthprovider.Columns, sqlgraph.NewFieldSpec(useroauthprovider.FieldID, field.TypeInt64))
	if ps := uopu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uopu.mutation.UserID(); ok {
		_spec.SetField(useroauthprovider.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := uopu.mutation.AddedUserID(); ok {
		_spec.AddField(useroauthprovider.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := uopu.mutation.OauthProvider(); ok {
		_spec.SetField(useroauthprovider.FieldOauthProvider, field.TypeString, value)
	}
	if value, ok := uopu.mutation.OauthUserID(); ok {
		_spec.SetField(useroauthprovider.FieldOauthUserID, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uopu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useroauthprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uopu.mutation.done = true
	return n, nil
}

// UserOauthProviderUpdateOne is the builder for updating a single UserOauthProvider entity.
type UserOauthProviderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserOauthProviderMutation
}

// SetUserID sets the "user_id" field.
func (uopuo *UserOauthProviderUpdateOne) SetUserID(i int64) *UserOauthProviderUpdateOne {
	uopuo.mutation.ResetUserID()
	uopuo.mutation.SetUserID(i)
	return uopuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uopuo *UserOauthProviderUpdateOne) SetNillableUserID(i *int64) *UserOauthProviderUpdateOne {
	if i != nil {
		uopuo.SetUserID(*i)
	}
	return uopuo
}

// AddUserID adds i to the "user_id" field.
func (uopuo *UserOauthProviderUpdateOne) AddUserID(i int64) *UserOauthProviderUpdateOne {
	uopuo.mutation.AddUserID(i)
	return uopuo
}

// SetOauthProvider sets the "oauth_provider" field.
func (uopuo *UserOauthProviderUpdateOne) SetOauthProvider(s string) *UserOauthProviderUpdateOne {
	uopuo.mutation.SetOauthProvider(s)
	return uopuo
}

// SetNillableOauthProvider sets the "oauth_provider" field if the given value is not nil.
func (uopuo *UserOauthProviderUpdateOne) SetNillableOauthProvider(s *string) *UserOauthProviderUpdateOne {
	if s != nil {
		uopuo.SetOauthProvider(*s)
	}
	return uopuo
}

// SetOauthUserID sets the "oauth_user_id" field.
func (uopuo *UserOauthProviderUpdateOne) SetOauthUserID(s string) *UserOauthProviderUpdateOne {
	uopuo.mutation.SetOauthUserID(s)
	return uopuo
}

// SetNillableOauthUserID sets the "oauth_user_id" field if the given value is not nil.
func (uopuo *UserOauthProviderUpdateOne) SetNillableOauthUserID(s *string) *UserOauthProviderUpdateOne {
	if s != nil {
		uopuo.SetOauthUserID(*s)
	}
	return uopuo
}

// Mutation returns the UserOauthProviderMutation object of the builder.
func (uopuo *UserOauthProviderUpdateOne) Mutation() *UserOauthProviderMutation {
	return uopuo.mutation
}

// Where appends a list predicates to the UserOauthProviderUpdate builder.
func (uopuo *UserOauthProviderUpdateOne) Where(ps ...predicate.UserOauthProvider) *UserOauthProviderUpdateOne {
	uopuo.mutation.Where(ps...)
	return uopuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uopuo *UserOauthProviderUpdateOne) Select(field string, fields ...string) *UserOauthProviderUpdateOne {
	uopuo.fields = append([]string{field}, fields...)
	return uopuo
}

// Save executes the query and returns the updated UserOauthProvider entity.
func (uopuo *UserOauthProviderUpdateOne) Save(ctx context.Context) (*UserOauthProvider, error) {
	return withHooks(ctx, uopuo.sqlSave, uopuo.mutation, uopuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uopuo *UserOauthProviderUpdateOne) SaveX(ctx context.Context) *UserOauthProvider {
	node, err := uopuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uopuo *UserOauthProviderUpdateOne) Exec(ctx context.Context) error {
	_, err := uopuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uopuo *UserOauthProviderUpdateOne) ExecX(ctx context.Context) {
	if err := uopuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uopuo *UserOauthProviderUpdateOne) check() error {
	if v, ok := uopuo.mutation.OauthProvider(); ok {
		if err := useroauthprovider.OauthProviderValidator(v); err != nil {
			return &ValidationError{Name: "oauth_provider", err: fmt.Errorf(`ent: validator failed for field "UserOauthProvider.oauth_provider": %w`, err)}
		}
	}
	if v, ok := uopuo.mutation.OauthUserID(); ok {
		if err := useroauthprovider.OauthUserIDValidator(v); err != nil {
			return &ValidationError{Name: "oauth_user_id", err: fmt.Errorf(`ent: validator failed for field "UserOauthProvider.oauth_user_id": %w`, err)}
		}
	}
	return nil
}

func (uopuo *UserOauthProviderUpdateOne) sqlSave(ctx context.Context) (_node *UserOauthProvider, err error) {
	if err := uopuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(useroauthprovider.Table, useroauthprovider.Columns, sqlgraph.NewFieldSpec(useroauthprovider.FieldID, field.TypeInt64))
	id, ok := uopuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserOauthProvider.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uopuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, useroauthprovider.FieldID)
		for _, f := range fields {
			if !useroauthprovider.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != useroauthprovider.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uopuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uopuo.mutation.UserID(); ok {
		_spec.SetField(useroauthprovider.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := uopuo.mutation.AddedUserID(); ok {
		_spec.AddField(useroauthprovider.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := uopuo.mutation.OauthProvider(); ok {
		_spec.SetField(useroauthprovider.FieldOauthProvider, field.TypeString, value)
	}
	if value, ok := uopuo.mutation.OauthUserID(); ok {
		_spec.SetField(useroauthprovider.FieldOauthUserID, field.TypeString, value)
	}
	_node = &UserOauthProvider{config: uopuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uopuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useroauthprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uopuo.mutation.done = true
	return _node, nil
}
