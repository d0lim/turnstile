// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/d0lim/turnstile/internal/ent/useroauthprovider"
)

// UserOauthProvider is the model entity for the UserOauthProvider schema.
type UserOauthProvider struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int64 `json:"user_id,omitempty"`
	// OauthProvider holds the value of the "oauth_provider" field.
	OauthProvider string `json:"oauth_provider,omitempty"`
	// OauthUserID holds the value of the "oauth_user_id" field.
	OauthUserID  string `json:"oauth_user_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserOauthProvider) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case useroauthprovider.FieldID, useroauthprovider.FieldUserID:
			values[i] = new(sql.NullInt64)
		case useroauthprovider.FieldOauthProvider, useroauthprovider.FieldOauthUserID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserOauthProvider fields.
func (uop *UserOauthProvider) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case useroauthprovider.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uop.ID = int(value.Int64)
		case useroauthprovider.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				uop.UserID = value.Int64
			}
		case useroauthprovider.FieldOauthProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field oauth_provider", values[i])
			} else if value.Valid {
				uop.OauthProvider = value.String
			}
		case useroauthprovider.FieldOauthUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field oauth_user_id", values[i])
			} else if value.Valid {
				uop.OauthUserID = value.String
			}
		default:
			uop.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserOauthProvider.
// This includes values selected through modifiers, order, etc.
func (uop *UserOauthProvider) Value(name string) (ent.Value, error) {
	return uop.selectValues.Get(name)
}

// Update returns a builder for updating this UserOauthProvider.
// Note that you need to call UserOauthProvider.Unwrap() before calling this method if this UserOauthProvider
// was returned from a transaction, and the transaction was committed or rolled back.
func (uop *UserOauthProvider) Update() *UserOauthProviderUpdateOne {
	return NewUserOauthProviderClient(uop.config).UpdateOne(uop)
}

// Unwrap unwraps the UserOauthProvider entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uop *UserOauthProvider) Unwrap() *UserOauthProvider {
	_tx, ok := uop.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserOauthProvider is not a transactional entity")
	}
	uop.config.driver = _tx.drv
	return uop
}

// String implements the fmt.Stringer.
func (uop *UserOauthProvider) String() string {
	var builder strings.Builder
	builder.WriteString("UserOauthProvider(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uop.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", uop.UserID))
	builder.WriteString(", ")
	builder.WriteString("oauth_provider=")
	builder.WriteString(uop.OauthProvider)
	builder.WriteString(", ")
	builder.WriteString("oauth_user_id=")
	builder.WriteString(uop.OauthUserID)
	builder.WriteByte(')')
	return builder.String()
}

// UserOauthProviders is a parsable slice of UserOauthProvider.
type UserOauthProviders []*UserOauthProvider
