// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/d0lim/turnstile/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// OAuthID applies equality check predicate on the "o_auth_id" field. It's identical to OAuthIDEQ.
func OAuthID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOAuthID, v))
}

// OAuthProvider applies equality check predicate on the "o_auth_provider" field. It's identical to OAuthProviderEQ.
func OAuthProvider(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOAuthProvider, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// ProfileImageURL applies equality check predicate on the "profile_image_url" field. It's identical to ProfileImageURLEQ.
func ProfileImageURL(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldProfileImageURL, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// OAuthIDEQ applies the EQ predicate on the "o_auth_id" field.
func OAuthIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOAuthID, v))
}

// OAuthIDNEQ applies the NEQ predicate on the "o_auth_id" field.
func OAuthIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldOAuthID, v))
}

// OAuthIDIn applies the In predicate on the "o_auth_id" field.
func OAuthIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldOAuthID, vs...))
}

// OAuthIDNotIn applies the NotIn predicate on the "o_auth_id" field.
func OAuthIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldOAuthID, vs...))
}

// OAuthIDGT applies the GT predicate on the "o_auth_id" field.
func OAuthIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldOAuthID, v))
}

// OAuthIDGTE applies the GTE predicate on the "o_auth_id" field.
func OAuthIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldOAuthID, v))
}

// OAuthIDLT applies the LT predicate on the "o_auth_id" field.
func OAuthIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldOAuthID, v))
}

// OAuthIDLTE applies the LTE predicate on the "o_auth_id" field.
func OAuthIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldOAuthID, v))
}

// OAuthIDContains applies the Contains predicate on the "o_auth_id" field.
func OAuthIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldOAuthID, v))
}

// OAuthIDHasPrefix applies the HasPrefix predicate on the "o_auth_id" field.
func OAuthIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldOAuthID, v))
}

// OAuthIDHasSuffix applies the HasSuffix predicate on the "o_auth_id" field.
func OAuthIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldOAuthID, v))
}

// OAuthIDEqualFold applies the EqualFold predicate on the "o_auth_id" field.
func OAuthIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldOAuthID, v))
}

// OAuthIDContainsFold applies the ContainsFold predicate on the "o_auth_id" field.
func OAuthIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldOAuthID, v))
}

// OAuthProviderEQ applies the EQ predicate on the "o_auth_provider" field.
func OAuthProviderEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOAuthProvider, v))
}

// OAuthProviderNEQ applies the NEQ predicate on the "o_auth_provider" field.
func OAuthProviderNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldOAuthProvider, v))
}

// OAuthProviderIn applies the In predicate on the "o_auth_provider" field.
func OAuthProviderIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldOAuthProvider, vs...))
}

// OAuthProviderNotIn applies the NotIn predicate on the "o_auth_provider" field.
func OAuthProviderNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldOAuthProvider, vs...))
}

// OAuthProviderGT applies the GT predicate on the "o_auth_provider" field.
func OAuthProviderGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldOAuthProvider, v))
}

// OAuthProviderGTE applies the GTE predicate on the "o_auth_provider" field.
func OAuthProviderGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldOAuthProvider, v))
}

// OAuthProviderLT applies the LT predicate on the "o_auth_provider" field.
func OAuthProviderLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldOAuthProvider, v))
}

// OAuthProviderLTE applies the LTE predicate on the "o_auth_provider" field.
func OAuthProviderLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldOAuthProvider, v))
}

// OAuthProviderContains applies the Contains predicate on the "o_auth_provider" field.
func OAuthProviderContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldOAuthProvider, v))
}

// OAuthProviderHasPrefix applies the HasPrefix predicate on the "o_auth_provider" field.
func OAuthProviderHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldOAuthProvider, v))
}

// OAuthProviderHasSuffix applies the HasSuffix predicate on the "o_auth_provider" field.
func OAuthProviderHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldOAuthProvider, v))
}

// OAuthProviderEqualFold applies the EqualFold predicate on the "o_auth_provider" field.
func OAuthProviderEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldOAuthProvider, v))
}

// OAuthProviderContainsFold applies the ContainsFold predicate on the "o_auth_provider" field.
func OAuthProviderContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldOAuthProvider, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldName, v))
}

// ProfileImageURLEQ applies the EQ predicate on the "profile_image_url" field.
func ProfileImageURLEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldProfileImageURL, v))
}

// ProfileImageURLNEQ applies the NEQ predicate on the "profile_image_url" field.
func ProfileImageURLNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldProfileImageURL, v))
}

// ProfileImageURLIn applies the In predicate on the "profile_image_url" field.
func ProfileImageURLIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldProfileImageURL, vs...))
}

// ProfileImageURLNotIn applies the NotIn predicate on the "profile_image_url" field.
func ProfileImageURLNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldProfileImageURL, vs...))
}

// ProfileImageURLGT applies the GT predicate on the "profile_image_url" field.
func ProfileImageURLGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldProfileImageURL, v))
}

// ProfileImageURLGTE applies the GTE predicate on the "profile_image_url" field.
func ProfileImageURLGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldProfileImageURL, v))
}

// ProfileImageURLLT applies the LT predicate on the "profile_image_url" field.
func ProfileImageURLLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldProfileImageURL, v))
}

// ProfileImageURLLTE applies the LTE predicate on the "profile_image_url" field.
func ProfileImageURLLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldProfileImageURL, v))
}

// ProfileImageURLContains applies the Contains predicate on the "profile_image_url" field.
func ProfileImageURLContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldProfileImageURL, v))
}

// ProfileImageURLHasPrefix applies the HasPrefix predicate on the "profile_image_url" field.
func ProfileImageURLHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldProfileImageURL, v))
}

// ProfileImageURLHasSuffix applies the HasSuffix predicate on the "profile_image_url" field.
func ProfileImageURLHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldProfileImageURL, v))
}

// ProfileImageURLIsNil applies the IsNil predicate on the "profile_image_url" field.
func ProfileImageURLIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldProfileImageURL))
}

// ProfileImageURLNotNil applies the NotNil predicate on the "profile_image_url" field.
func ProfileImageURLNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldProfileImageURL))
}

// ProfileImageURLEqualFold applies the EqualFold predicate on the "profile_image_url" field.
func ProfileImageURLEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldProfileImageURL, v))
}

// ProfileImageURLContainsFold applies the ContainsFold predicate on the "profile_image_url" field.
func ProfileImageURLContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldProfileImageURL, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
