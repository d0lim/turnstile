// Code generated by ent, DO NOT EDIT.

package useroauthprovider

import (
	"entgo.io/ent/dialect/sql"
	"github.com/d0lim/turnstile/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int64) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldEQ(FieldUserID, v))
}

// OauthProvider applies equality check predicate on the "oauth_provider" field. It's identical to OauthProviderEQ.
func OauthProvider(v string) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldEQ(FieldOauthProvider, v))
}

// OauthUserID applies equality check predicate on the "oauth_user_id" field. It's identical to OauthUserIDEQ.
func OauthUserID(v string) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldEQ(FieldOauthUserID, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int64) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int64) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int64) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int64) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int64) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int64) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int64) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int64) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldLTE(FieldUserID, v))
}

// OauthProviderEQ applies the EQ predicate on the "oauth_provider" field.
func OauthProviderEQ(v string) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldEQ(FieldOauthProvider, v))
}

// OauthProviderNEQ applies the NEQ predicate on the "oauth_provider" field.
func OauthProviderNEQ(v string) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldNEQ(FieldOauthProvider, v))
}

// OauthProviderIn applies the In predicate on the "oauth_provider" field.
func OauthProviderIn(vs ...string) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldIn(FieldOauthProvider, vs...))
}

// OauthProviderNotIn applies the NotIn predicate on the "oauth_provider" field.
func OauthProviderNotIn(vs ...string) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldNotIn(FieldOauthProvider, vs...))
}

// OauthProviderGT applies the GT predicate on the "oauth_provider" field.
func OauthProviderGT(v string) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldGT(FieldOauthProvider, v))
}

// OauthProviderGTE applies the GTE predicate on the "oauth_provider" field.
func OauthProviderGTE(v string) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldGTE(FieldOauthProvider, v))
}

// OauthProviderLT applies the LT predicate on the "oauth_provider" field.
func OauthProviderLT(v string) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldLT(FieldOauthProvider, v))
}

// OauthProviderLTE applies the LTE predicate on the "oauth_provider" field.
func OauthProviderLTE(v string) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldLTE(FieldOauthProvider, v))
}

// OauthProviderContains applies the Contains predicate on the "oauth_provider" field.
func OauthProviderContains(v string) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldContains(FieldOauthProvider, v))
}

// OauthProviderHasPrefix applies the HasPrefix predicate on the "oauth_provider" field.
func OauthProviderHasPrefix(v string) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldHasPrefix(FieldOauthProvider, v))
}

// OauthProviderHasSuffix applies the HasSuffix predicate on the "oauth_provider" field.
func OauthProviderHasSuffix(v string) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldHasSuffix(FieldOauthProvider, v))
}

// OauthProviderEqualFold applies the EqualFold predicate on the "oauth_provider" field.
func OauthProviderEqualFold(v string) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldEqualFold(FieldOauthProvider, v))
}

// OauthProviderContainsFold applies the ContainsFold predicate on the "oauth_provider" field.
func OauthProviderContainsFold(v string) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldContainsFold(FieldOauthProvider, v))
}

// OauthUserIDEQ applies the EQ predicate on the "oauth_user_id" field.
func OauthUserIDEQ(v string) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldEQ(FieldOauthUserID, v))
}

// OauthUserIDNEQ applies the NEQ predicate on the "oauth_user_id" field.
func OauthUserIDNEQ(v string) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldNEQ(FieldOauthUserID, v))
}

// OauthUserIDIn applies the In predicate on the "oauth_user_id" field.
func OauthUserIDIn(vs ...string) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldIn(FieldOauthUserID, vs...))
}

// OauthUserIDNotIn applies the NotIn predicate on the "oauth_user_id" field.
func OauthUserIDNotIn(vs ...string) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldNotIn(FieldOauthUserID, vs...))
}

// OauthUserIDGT applies the GT predicate on the "oauth_user_id" field.
func OauthUserIDGT(v string) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldGT(FieldOauthUserID, v))
}

// OauthUserIDGTE applies the GTE predicate on the "oauth_user_id" field.
func OauthUserIDGTE(v string) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldGTE(FieldOauthUserID, v))
}

// OauthUserIDLT applies the LT predicate on the "oauth_user_id" field.
func OauthUserIDLT(v string) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldLT(FieldOauthUserID, v))
}

// OauthUserIDLTE applies the LTE predicate on the "oauth_user_id" field.
func OauthUserIDLTE(v string) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldLTE(FieldOauthUserID, v))
}

// OauthUserIDContains applies the Contains predicate on the "oauth_user_id" field.
func OauthUserIDContains(v string) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldContains(FieldOauthUserID, v))
}

// OauthUserIDHasPrefix applies the HasPrefix predicate on the "oauth_user_id" field.
func OauthUserIDHasPrefix(v string) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldHasPrefix(FieldOauthUserID, v))
}

// OauthUserIDHasSuffix applies the HasSuffix predicate on the "oauth_user_id" field.
func OauthUserIDHasSuffix(v string) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldHasSuffix(FieldOauthUserID, v))
}

// OauthUserIDEqualFold applies the EqualFold predicate on the "oauth_user_id" field.
func OauthUserIDEqualFold(v string) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldEqualFold(FieldOauthUserID, v))
}

// OauthUserIDContainsFold applies the ContainsFold predicate on the "oauth_user_id" field.
func OauthUserIDContainsFold(v string) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.FieldContainsFold(FieldOauthUserID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserOauthProvider) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserOauthProvider) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserOauthProvider) predicate.UserOauthProvider {
	return predicate.UserOauthProvider(sql.NotPredicates(p))
}
